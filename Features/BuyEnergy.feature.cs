// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EnsekAPITests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BuyEnergy", Description="This feature covers scenarios regarding buying units of fuel using api endpoints " +
        "and validating the messages received.", SourceFile="Features\\BuyEnergy.feature", SourceLine=0)]
    public partial class BuyEnergyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BuyEnergy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BuyEnergy", "This feature covers scenarios regarding buying units of fuel using api endpoints " +
                    "and validating the messages received.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User Can Reset Test data using the POST /ENSEK/reset endpoint", SourceLine=5)]
        public virtual void VerifyUserCanResetTestDataUsingThePOSTENSEKResetEndpoint()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User Can Reset Test data using the POST /ENSEK/reset endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I login to obtain access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("I reset the test data back to its initial state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.Then("The user should see a success message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User can get the count of orders using the GET /ENSEK/orders endpoint", SourceLine=10)]
        public virtual void VerifyUserCanGetTheCountOfOrdersUsingTheGETENSEKOrdersEndpoint()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User can get the count of orders using the GET /ENSEK/orders endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I login to obtain access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When("The user sends GET request to obtain details of previous orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("The user should see a total of 5 orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint(string quantity, string fuelType, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("quantity", quantity);
            argumentsOfScenario.Add("fuelType", fuelType);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify User Can Buy Energy Based On Quantity Of Units Available using PUT /ENSEK​" +
                    "/buy​/{id}​/{quantity} endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("I login to obtain access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When(string.Format("The user buys {0} quantity of {1} fuel", quantity, fuelType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then(string.Format("The user would get back response message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User Can Buy Energy Based On Quantity Of Units Available using PUT /ENSEK​" +
            "/buy​/{id}​/{quantity} endpoint, Variant 0", SourceLine=21)]
        public virtual void VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint_Variant0()
        {
#line 16
this.VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint("10", "gas", "You have purchased 10 m³ at a cost of 3.4000000000000004 there are 2990 units rem" +
                    "aining.", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User Can Buy Energy Based On Quantity Of Units Available using PUT /ENSEK​" +
            "/buy​/{id}​/{quantity} endpoint, Variant 1", SourceLine=21)]
        public virtual void VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint_Variant1()
        {
#line 16
this.VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint("10", "electric", "You have purchased 10 kWh at a cost of 4.699999999999999 there are 4312 units rem" +
                    "aining.", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User Can Buy Energy Based On Quantity Of Units Available using PUT /ENSEK​" +
            "/buy​/{id}​/{quantity} endpoint, Variant 2", SourceLine=21)]
        public virtual void VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint_Variant2()
        {
#line 16
this.VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint("9", "nuclear", "There is no nuclear fuel to purchase!", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify User Can Buy Energy Based On Quantity Of Units Available using PUT /ENSEK​" +
            "/buy​/{id}​/{quantity} endpoint, Variant 3", SourceLine=21)]
        public virtual void VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint_Variant3()
        {
#line 16
this.VerifyUserCanBuyEnergyBasedOnQuantityOfUnitsAvailableUsingPUTENSEKBuyIdQuantityEndpoint("5", "oil", "You have purchased 5 Litres at a cost of 2.5 there are 15 units remaining.", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyThatThePreviousOrderIsPresentInTheOrdersListWithTheExpectedDetailsUsingGETENSEKOrdersOrderIdEndpoint(string quantity, string fuelType, string id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("quantity", quantity);
            argumentsOfScenario.Add("fuelType", fuelType);
            argumentsOfScenario.Add("id", id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the previous order is present in the orders list with the expected de" +
                    "tails using GET /ENSEK​/orders/{orderId} endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("I login to obtain access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When(string.Format("The user buys {0} quantity of {1} fuel", quantity, fuelType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("The user sends request to obtain details of previous order with order id 31fc32da" +
                        "-bccb-44ab-9352-4f43fc44ed4b", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.Then(string.Format("The user should see {0} details of previous orders", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that the previous order is present in the orders list with the expected de" +
            "tails using GET /ENSEK​/orders/{orderId} endpoint, 20", SourceLine=33)]
        public virtual void VerifyThatThePreviousOrderIsPresentInTheOrdersListWithTheExpectedDetailsUsingGETENSEKOrdersOrderIdEndpoint_20()
        {
#line 27
this.VerifyThatThePreviousOrderIsPresentInTheOrdersListWithTheExpectedDetailsUsingGETENSEKOrdersOrderIdEndpoint("20", "electric", "31fc32da-bccb-44ab-9352-4f43fc44ed4b", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint(string fuel, string id, string quantity, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fuel", fuel);
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("quantity", quantity);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify orders that were created before the current date are returned using GET /E" +
                    "NSEK​/orders/{orderId} endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("I login to obtain access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.When(string.Format("The user buys {0} quantity of <fuelType> fuel", quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.And(string.Format("The user sends request to obtain details of previous order with order id {0}", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.Then(string.Format("The user should see orders with fuel type {0} , order id {1} and quantity {2} wer" +
                            "e created before the current date", fuel, id, quantity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify orders that were created before the current date are returned using GET /E" +
            "NSEK​/orders/{orderId} endpoint, Variant 0", SourceLine=42)]
        public virtual void VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint_Variant0()
        {
#line 36
this.VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint("gas", "31fc32da-bccb-44ab-9352-4f43fc44ed4b", "5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify orders that were created before the current date are returned using GET /E" +
            "NSEK​/orders/{orderId} endpoint, Variant 1", SourceLine=42)]
        public virtual void VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint_Variant1()
        {
#line 36
this.VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint("electric", "080d9823-e874-4b5b-99ff-2021f2a59b25", "23", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify orders that were created before the current date are returned using GET /E" +
            "NSEK​/orders/{orderId} endpoint, Variant 2", SourceLine=42)]
        public virtual void VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint_Variant2()
        {
#line 36
this.VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint("nuclear", "2cdd6f69-95df-437e-b4d3-e772472db8de", "15", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify orders that were created before the current date are returned using GET /E" +
            "NSEK​/orders/{orderId} endpoint, Variant 3", SourceLine=42)]
        public virtual void VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint_Variant3()
        {
#line 36
this.VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint("oil", "080d9823-e874-4b5b-99ff-2021f2a59b24", "25", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify orders that were created before the current date are returned using GET /E" +
            "NSEK​/orders/{orderId} endpoint, Variant 4", SourceLine=42)]
        public virtual void VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint_Variant4()
        {
#line 36
this.VerifyOrdersThatWereCreatedBeforeTheCurrentDateAreReturnedUsingGETENSEKOrdersOrderIdEndpoint("gas", "31fc32da-bccb-44ab-9352-4f43fc44ed4b", "5", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
